{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo-te-logo.png"],"names":["App","react_default","a","createElement","className","src","logo","alt","type","placeholder","disabled","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAkCeA,0LA5BX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAC/CN,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,YAAY,kJACrCR,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOE,UAAQ,EAACC,MAAM,2GAAsBF,YAAY,wiCAE5ER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,YAAUM,YAAY,0KAC5BR,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,YAAUM,YAAY,yJAE9BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,YAAUO,UAAQ,EAAEC,MAAM,2GAAsBF,YAAY,4LAClER,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,YAAUO,UAAQ,EAAEC,MAAM,2GAAsBF,YAAY,oMAGtER,EAAAC,EAAAC,cAAA,qDAxBUS,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d5a2a503.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo-te-logo.png';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span>MEM Project</span>\n          <span><img src={logo} className=\"App-logo\" alt=\"logo\" /></span>\n          <span>relative-chaos</span>\n        </header>\n        <h4>end-to-end content encryptyon lab</ h4>\n        <div className=\"App-ui\">\n          <div className=\"h-box\">\n            <span><input type=\"text\" placeholder=\"Открытый ключ собеседника\"/></span>\n            <span><input type=\"text\" disabled title=\"Скопировать в буфер\" placeholder=\"Ваш открытый ключ: 2d0fdef52ddbf10ffc6420d14e7a3514a32ded1203cfb8eb5c8bf55c72490b7c74644ee63e8b2855cf7b7af5f23f7a8f6318f5b65ceca6e4c77cecd07d2566ca9f365cb8657d9cb69c9efacb90b7147f7c17363c3410438ea4d096dbcc1322569448d5dfd04b9b551521d426dbd7481c34a11f8e2435a0198d67895a9f5f861336723741700c6673a90bfa92f8a5e0fa279b14bd307b747cd372a5c803ae62ad5019e14b175d01f29dd34dd56e814ae8afd80a757ec10209ba37613b81b072e981ee8631f324570ba3b7f9842e12f59afd90027474e78fae5df1047a7b9b55b7306791420ee6fc2ffab35d8ee34105b49bae5d819196bfab80c741f95338cfa737ca1a338e74c82afb7c79242300d0b98540a62d6ae039cc91b64d984083b4c6463eb238d3d7a8d05f558a479c811c3fafa0e022d0e159025e8e77c4e58bfb13b6e4e46f9126b735396e9ea553fb510243f6a7b58fbed7d6d8791c0a67cdac350f21902f2e09c2b8c5cc27c74edb05879d57f96070deb37d2f5294ed35ccb3b1b5a571c946c706e2ea7bda1337451b915a8f77b1af0cb215920e9d95ec686a6864f89ffc4d4b09b2ff8ccc2d0735d18a91814ae86ac0bad377ec7de279402185aa70caa0bc006d96c5716ddadd80f17d1863e387a1cb9e260c5ff0ce1825633a4fc\"/></span>\n          </div>\n          <div className=\"h-box\">\n            <span><textarea placeholder=\"Шифрованный текст собеседника\"/></span>\n            <span><textarea placeholder=\"Ваше сообщение собеседнику\"/></span>\n          </div>\n          <div className=\"h-box\">\n            <span><textarea disabled  title=\"Скопировать в буфер\" placeholder=\"Расшифрованный текст собеседника\"/></span>\n            <span><textarea disabled  title=\"Скопировать в буфер\" placeholder=\"Шифрованное сообщение собеседнику\"/></span>\n          </div>\n        </div>\n        <h5>2018 © MEM COST Technologies</h5>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-te-logo.aaa32282.png\";"],"sourceRoot":""}